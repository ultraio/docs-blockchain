import{_ as s,c as i,o as a,N as n}from"./chunks/framework.qSInOY95.js";const y=JSON.parse('{"title":"Uniq On-chain Data","description":"","frontmatter":{"title":"Uniq On-chain Data","order":1},"headers":[],"relativePath":"tutorials/uniq-factories/uniq-on-chain-data/uniq-on-chain-data.md","filePath":"tutorials/uniq-factories/uniq-on-chain-data/uniq-on-chain-data.md","lastUpdated":null}'),e={name:"tutorials/uniq-factories/uniq-on-chain-data/uniq-on-chain-data.md"},t=n(`<h1 id="uniq-on-chain-data" tabindex="-1">Uniq On-chain Data <a class="header-anchor" href="#uniq-on-chain-data" aria-label="Permalink to &quot;Uniq On-chain Data&quot;">​</a></h1><h2 id="overview-of-uniq-on-chain-data-feature" tabindex="-1">Overview of Uniq On-chain Data feature <a class="header-anchor" href="#overview-of-uniq-on-chain-data-feature" aria-label="Permalink to &quot;Overview of Uniq On-chain Data feature&quot;">​</a></h2><p>Uniq On-chain Data is a flexible schema system that allows factory managers to define custom data structures for their Uniqs. It consists of two main components:</p><ol><li><strong>Factory Key Definitions</strong>: Define the schema/structure with default values for all Uniqs from a factory</li><li><strong>Uniq Key Values</strong>: Store custom values that override factory defaults for individual Uniqs</li></ol><p>The factory manager pays a non-refundable RAM fee when adding new key definitions. When a Uniq is minted, a RAM fee is transferred from the manager to their key RAM vault and refunded when the Uniq is burnt.</p><h2 id="how-the-system-works" tabindex="-1">How the System Works <a class="header-anchor" href="#how-the-system-works" aria-label="Permalink to &quot;How the System Works&quot;">​</a></h2><h3 id="factory-key-definitions" tabindex="-1">Factory Key Definitions <a class="header-anchor" href="#factory-key-definitions" aria-label="Permalink to &quot;Factory Key Definitions&quot;">​</a></h3><p>Factory key definitions are stored in <code>token_factory_v1.keys</code> and define the schema for all Uniqs from that factory:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory_keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key_def_table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_defs;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Array of key definitions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total_key_def_ram_payment_size;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // RAM costs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total_key_value_ram_payment_size;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key_def_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    string name;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          // Key name (e.g. &quot;Level&quot;, &quot;Rarity&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type_index;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                   // Index into supported types</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> edit_rights;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  // Who can edit this key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editors;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // Authorized editors</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    optional</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key_value_store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Default value for all Uniqs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>Key Properties</strong>:</p><ul><li><strong>Immutable Order</strong>: Existing key definitions cannot be modified or reordered</li><li><strong>Append-Only</strong>: Only new keys can be added to the end</li><li><strong>Default Values</strong>: Each key can specify a default value that all Uniqs inherit</li></ul><h3 id="uniq-key-values" tabindex="-1">Uniq Key Values <a class="header-anchor" href="#uniq-key-values" aria-label="Permalink to &quot;Uniq Key Values&quot;">​</a></h3><p>Individual Uniqs store custom values in <code>token_v1.key_values</code> to override factory defaults:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> key_value_pair</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_index;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // References factory key_defs array index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    key_value_store key_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // The custom value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">key_value_pair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_value_vec;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, key_value_store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_value_map;</span></span></code></pre></div><p><strong>Key Properties</strong>:</p><ul><li><strong>Selective Storage</strong>: Uniqs only store values when overriding defaults</li><li><strong>Index-Based References</strong>: Uses <code>key_index</code> to point to factory key definitions</li><li><strong>Unordered</strong>: Custom values can be stored in any order</li><li><strong>Optional</strong>: Uniqs may have no custom values (all defaults)</li></ul><h3 id="integration-performance-note" tabindex="-1">Integration Performance Note <a class="header-anchor" href="#integration-performance-note" aria-label="Permalink to &quot;Integration Performance Note&quot;">​</a></h3><p>For external integrators, the <code>key_value_map</code> structure can be used to read existing <code>key_value_vector</code> data:</p><ul><li><strong>Storage Format</strong>: On-chain data is stored as <code>key_value_vector</code> (for compatibility)</li><li><strong>Reading Format</strong>: External contracts can deserialize as <code>key_value_map</code> for O(log n) lookups</li><li><strong>Performance Trade-off</strong>: Map requires sorting overhead during deserialization but provides faster lookups</li><li><strong>Use Case</strong>: Map approach may benefit contracts with many keys (&gt;20) or very frequent lookups</li><li><strong>Backward Compatibility</strong>: Existing contracts using vector format continue to work unchanged</li></ul><h2 id="proper-integration-pattern" tabindex="-1">Proper Integration Pattern <a class="header-anchor" href="#proper-integration-pattern" aria-label="Permalink to &quot;Proper Integration Pattern&quot;">​</a></h2><h3 id="❌-wrong-hardcoded-array-indices" tabindex="-1">❌ WRONG - Hardcoded Array Indices <a class="header-anchor" href="#❌-wrong-hardcoded-array-indices" aria-label="Permalink to &quot;❌ WRONG - Hardcoded Array Indices&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DON&#39;T DO THIS - Very fragile and will break!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].key_value);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Assumes position 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rarity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].key_value);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Assumes position 1</span></span></code></pre></div><p><strong>Why This is Wrong</strong>:</p><ul><li>Assumes specific order in Uniq&#39;s key_values (but values can be in any order!)</li><li>Ignores default value system</li><li>Breaks when Uniqs store values in different orders</li><li>Doesn&#39;t follow the intended design pattern</li></ul><h3 id="✅-correct-name-based-lookup-with-defaults" tabindex="-1">✅ CORRECT - Name-Based Lookup with Defaults <a class="header-anchor" href="#✅-correct-name-based-lookup-with-defaults" aria-label="Permalink to &quot;✅ CORRECT - Name-Based Lookup with Defaults&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Proper pattern: Name → Factory Key Index → Uniq Value or Default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> token_v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> uniq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory_keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> factory_keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. Find key definition index by name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> find_key_def_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory_keys.key_defs, key_name);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_def </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory_keys.key_defs[key_index];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. Search Uniq&#39;s key_values for custom value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (uniq.key_values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kv : uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kv.key_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_index) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(kv.key_value);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Found custom value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. Fallback to factory default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(key_def.default_value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Level&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rarity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Rarity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="alternative-map-based-integration-for-specific-use-cases" tabindex="-1">Alternative: Map-Based Integration for Specific Use Cases <a class="header-anchor" href="#alternative-map-based-integration-for-specific-use-cases" aria-label="Permalink to &quot;Alternative: Map-Based Integration for Specific Use Cases&quot;">​</a></h3><p>For external integrators with many keys or very frequent lookups, you can deserialize the same data as a map:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Using map structure for better performance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typename</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value_fast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> token_v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> uniq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory_keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> factory_keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> key_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1. Find key definition index by name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    uint8_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> find_key_def_index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory_keys.key_defs, key_name);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_def </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory_keys.key_defs[key_index];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2. Deserialize key_values as map for O(log n) lookup</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (uniq.key_values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Note: Same binary data, different deserialization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        key_value_map key_map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize_as_map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key_index);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_map.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(it-&gt;second);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Found custom value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3. Fallback to factory default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(key_def.default_value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Usage - same API, better performance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value_fast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Level&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rarity </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value_fast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint64_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Rarity&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>Performance Analysis</strong>:</p><ul><li><strong>Vector approach</strong>: O(n) linear search, but no deserialization overhead</li><li><strong>Map approach</strong>: O(log n) lookup, but requires sorting during deserialization</li><li><strong>For typical use</strong>: Vector likely faster for ~10 keys or less due to sorting overhead</li><li><strong>For large datasets</strong>: Map becomes beneficial with many keys (&gt;20) or frequent lookups</li><li><strong>Binary compatibility</strong>: Both read the same on-chain data</li></ul><h3 id="data-flow-example" tabindex="-1">Data Flow Example <a class="header-anchor" href="#data-flow-example" aria-label="Permalink to &quot;Data Flow Example&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Factory Definition:</span></span>
<span class="line"><span>key_defs[0] = {name: &quot;Level&quot;, default_value: &quot;1&quot;}</span></span>
<span class="line"><span>key_defs[1] = {name: &quot;Rarity&quot;, default_value: &quot;Common&quot;}</span></span>
<span class="line"><span>key_defs[2] = {name: &quot;Experience&quot;, default_value: 0}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Fresh Uniq (no custom values):</span></span>
<span class="line"><span>key_values = null</span></span>
<span class="line"><span>→ Level=&quot;1&quot; (default), Rarity=&quot;Common&quot; (default), Experience=0 (default)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Leveled Uniq (some custom values):</span></span>
<span class="line"><span>key_values = [</span></span>
<span class="line"><span>    {key_index: 0, key_value: &quot;5&quot;},      // Level overridden</span></span>
<span class="line"><span>    {key_index: 2, key_value: 1500}      // Experience overridden</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>→ Level=&quot;5&quot; (custom), Rarity=&quot;Common&quot; (default), Experience=1500 (custom)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Different Uniq (same data, different order):</span></span>
<span class="line"><span>key_values = [</span></span>
<span class="line"><span>    {key_index: 2, key_value: 1500},     // Experience overridden</span></span>
<span class="line"><span>    {key_index: 0, key_value: &quot;5&quot;}       // Level overridden</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>→ Functionally identical to previous Uniq</span></span></code></pre></div><h2 id="integration-best-practices" tabindex="-1">Integration Best Practices <a class="header-anchor" href="#integration-best-practices" aria-label="Permalink to &quot;Integration Best Practices&quot;">​</a></h2><h3 id="_1-always-use-name-based-lookup" tabindex="-1">1. Always Use Name-Based Lookup <a class="header-anchor" href="#_1-always-use-name-based-lookup" aria-label="Permalink to &quot;1. Always Use Name-Based Lookup&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Good - Resilient to changes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AttributeName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Alternative - For high-scale scenarios with many keys or frequent lookups</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value_fast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AttributeName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ❌ Bad - Fragile and will break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].key_value);</span></span></code></pre></div><h3 id="_2-choose-integration-approach-based-on-use-case" tabindex="-1">2. Choose Integration Approach Based on Use Case <a class="header-anchor" href="#_2-choose-integration-approach-based-on-use-case" aria-label="Permalink to &quot;2. Choose Integration Approach Based on Use Case&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Vector approach - Recommended for typical use cases</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use when: ~10 keys or less, occasional lookups, simple integration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AttributeName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Map approach - For specific high-scale scenarios</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use when: Many keys (&gt;20), very frequent lookups, large datasets</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value_fast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AttributeName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="_3-handle-default-values-properly" tabindex="-1">3. Handle Default Values Properly <a class="header-anchor" href="#_3-handle-default-values-properly" aria-label="Permalink to &quot;3. Handle Default Values Properly&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ Your lookup function should automatically:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. Check if Uniq has custom value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. If not found, use factory default</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. Error if neither exists</span></span></code></pre></div><h3 id="_4-validate-factory-schema-once" tabindex="-1">4. Validate Factory Schema Once <a class="header-anchor" href="#_4-validate-factory-schema-once" aria-label="Permalink to &quot;4. Validate Factory Schema Once&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ✅ At function start, validate factory has expected keys</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> validate_factory_keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factory_keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> expected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected_key : expected) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> auto&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_def : keys.key_defs) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key_def.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected_key) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                found </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(found, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Factory missing expected key: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected_key);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_5-understand-business-logic-vs-data-access" tabindex="-1">5. Understand Business Logic vs Data Access <a class="header-anchor" href="#_5-understand-business-logic-vs-data-access" aria-label="Permalink to &quot;5. Understand Business Logic vs Data Access&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Business logic validation (workflow states)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uniq should be fresh&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Before processing</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uniq should be processed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // After processing</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Data access (use proper lookup)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_uniq_key_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq, factory_keys, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="common-integration-mistakes" tabindex="-1">Common Integration Mistakes <a class="header-anchor" href="#common-integration-mistakes" aria-label="Permalink to &quot;Common Integration Mistakes&quot;">​</a></h2><h3 id="❌-mistake-1-assuming-all-values-are-present" tabindex="-1">❌ Mistake 1: Assuming All Values Are Present <a class="header-anchor" href="#❌-mistake-1-assuming-all-values-are-present" aria-label="Permalink to &quot;❌ Mistake 1: Assuming All Values Are Present&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Wrong - assumes Uniq has all values stored</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory_keys.key_defs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    auto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[i].key_value;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Will crash!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="❌-mistake-2-ignoring-order-independence" tabindex="-1">❌ Mistake 2: Ignoring Order Independence <a class="header-anchor" href="#❌-mistake-2-ignoring-order-independence" aria-label="Permalink to &quot;❌ Mistake 2: Ignoring Order Independence&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Wrong - assumes specific order</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string first_attr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].key_value);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Could be anything!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">string second_attr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].key_value);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Could be anything!</span></span></code></pre></div><h3 id="❌-mistake-3-not-handling-fresh-uniqs" tabindex="-1">❌ Mistake 3: Not Handling Fresh Uniqs <a class="header-anchor" href="#❌-mistake-3-not-handling-fresh-uniqs" aria-label="Permalink to &quot;❌ Mistake 3: Not Handling Fresh Uniqs&quot;">​</a></h3><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Wrong - crashes on fresh Uniqs with no custom values</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uniq.key_values-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">has_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;missing key values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Shouldn&#39;t be required for reading!</span></span></code></pre></div><h2 id="actions-reference" tabindex="-1">Actions Reference <a class="header-anchor" href="#actions-reference" aria-label="Permalink to &quot;Actions Reference&quot;">​</a></h2><ul><li><p><a href="./../../../blockchain/contracts/nft-contract/nft-actions/addkeys.a.html">addkeys.a - Add new key pair for factory</a></p></li><li><p><a href="./../../../blockchain/contracts/nft-contract/nft-actions/setvals.a.html">setvals.a - Set key value for Uniq</a></p></li><li><p><a href="./../../../blockchain/contracts/nft-contract/nft-actions/stauctcfg.a.html">setktypes - Set supported key types for key pair</a></p></li></ul><h2 id="benefits-of-uniq-on-chain-data" tabindex="-1">Benefits of Uniq On-chain data <a class="header-anchor" href="#benefits-of-uniq-on-chain-data" aria-label="Permalink to &quot;Benefits of Uniq On-chain data&quot;">​</a></h2><ul><li><p><strong>Dynamic Metadata</strong>: Allow Uniq&#39;s metadata to be updated on chain without off-chain complexity</p></li><li><p><strong>Marketplace Integration</strong>: Enable Uniq marketplaces to provide filters for Uniqs with changing data</p></li><li><p><strong>Game Mechanics</strong>: Support evolving game assets with stats, levels, and attributes</p></li><li><p><strong>Flexible Schema</strong>: Define custom data structures that fit your specific use case</p></li><li><p><strong>Storage Efficiency</strong>: Uniqs only store values that differ from factory defaults</p></li></ul><h2 id="summary" tabindex="-1">Summary <a class="header-anchor" href="#summary" aria-label="Permalink to &quot;Summary&quot;">​</a></h2><p>Uniq On-chain Data is a powerful flexible schema system, not a fixed data structure. Proper integration requires:</p><ol><li><strong>Name-based key lookup</strong> instead of position-based access</li><li><strong>Appropriate performance approach</strong> - vector for typical use cases, map for high-scale scenarios</li><li><strong>Default value fallback</strong> for efficient storage</li><li><strong>Order independence</strong> awareness for robust code</li><li><strong>Business logic separation</strong> from data access patterns</li></ol><p><strong>Integration Options</strong>:</p><ul><li><strong>Vector approach</strong>: Simple, direct deserialization - recommended for typical use cases (~10 keys or less)</li><li><strong>Map approach</strong>: Same data with sorted structure - beneficial for large datasets (&gt;20 keys) or very frequent lookups</li><li><strong>Binary compatibility</strong>: Both approaches read identical on-chain data</li></ul><p>Following these patterns ensures your integration is robust, maintainable, and won&#39;t break as the system evolves.</p>`,61),l=[t];function h(k,p,r,d,o,g){return a(),i("div",null,l)}const c=s(e,[["render",h]]);export{y as __pageData,c as default};
