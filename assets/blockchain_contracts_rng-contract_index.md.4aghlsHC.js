import{_ as e,c as a,o as t,N as r}from"./chunks/framework.Sw95nWd2.js";const p=JSON.parse('{"title":"RNG Contract Overview","description":"","frontmatter":{"title":"RNG Contract Overview","order":-99},"headers":[],"relativePath":"blockchain/contracts/rng-contract/index.md","filePath":"blockchain/contracts/rng-contract/index.md","lastUpdated":null}'),n={name:"blockchain/contracts/rng-contract/index.md"},i=r('<h1 id="rng-contract" tabindex="-1">RNG Contract <a class="header-anchor" href="#rng-contract" aria-label="Permalink to &quot;RNG Contract&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p><code>ultra.rng</code> contract provides a secure and verifiable random number generation service for Ultra blockchain applications. It uses BLS12-381 cryptographic signatures to ensure the randomness cannot be manipulated by any party, including the oracle.</p><p>For Ultra, the RNG service is deployed under account <code>ultra.rng</code> and provides a decentralized solution for generating random numbers that can be used in games, lotteries, and other applications requiring randomness.</p><h2 id="contract-features" tabindex="-1">Contract features <a class="header-anchor" href="#contract-features" aria-label="Permalink to &quot;Contract features&quot;">​</a></h2><h3 id="_1-request-random-numbers" tabindex="-1">1 - Request Random Numbers <a class="header-anchor" href="#_1-request-random-numbers" aria-label="Permalink to &quot;1 - Request Random Numbers&quot;">​</a></h3><ul><li>Any smart contract can request a random number by calling the <code>requestrand</code> action with a unique seed and association ID.</li><li>The contract maintains a job queue and assigns unique job IDs to each request.</li><li>Seeds must be unique and cannot be zero to ensure proper randomness.</li></ul><h3 id="_2-oracle-service-integration" tabindex="-1">2 - Oracle Service Integration <a class="header-anchor" href="#_2-oracle-service-integration" aria-label="Permalink to &quot;2 - Oracle Service Integration&quot;">​</a></h3><ul><li>The Ultra oracle service monitors the RNG contract for new random number requests.</li><li>When a request is detected, the oracle service generates a cryptographically secure random value.</li><li>The oracle service calls the <code>setrand</code> action with the generated random value and BLS12-381 signature.</li><li>The oracle service also manages the public key by calling <code>setpubkey</code> when needed.</li></ul><h3 id="_3-verifiable-randomness" tabindex="-1">3 - Verifiable Randomness <a class="header-anchor" href="#_3-verifiable-randomness" aria-label="Permalink to &quot;3 - Verifiable Randomness&quot;">​</a></h3><ul><li>Uses BLS12-381 cryptographic signatures to ensure the randomness cannot be manipulated.</li><li>The oracle signs the random value with a private key, and the signature can be verified on-chain.</li><li>This prevents both the oracle and any other party from predicting or manipulating the random numbers.</li></ul><h3 id="_4-callback-system" tabindex="-1">4 - Callback System <a class="header-anchor" href="#_4-callback-system" aria-label="Permalink to &quot;4 - Callback System&quot;">​</a></h3><ul><li>When the oracle service calls <code>setrand</code>, the RNG contract verifies the signature and calls the <code>receiverand</code> action on the requesting contract.</li><li>The callback includes the association ID and the generated random number.</li><li>This allows contracts to receive random numbers asynchronously.</li></ul><h3 id="_5-administrative-controls" tabindex="-1">5 - Administrative Controls <a class="header-anchor" href="#_5-administrative-controls" aria-label="Permalink to &quot;5 - Administrative Controls&quot;">​</a></h3><ul><li>The oracle service can set the public key used for signature verification via <code>setpubkey</code>.</li><li>DApps can be banned or unbanned from using the RNG service.</li><li>Jobs can be killed to clean up the job queue.</li><li>All administrative actions can be disabled through the contract manager.</li></ul><h3 id="_6-security-features" tabindex="-1">6 - Security Features <a class="header-anchor" href="#_6-security-features" aria-label="Permalink to &quot;6 - Security Features&quot;">​</a></h3><ul><li>Banned accounts are silently ignored when requesting random numbers.</li><li>Seeds are tracked to prevent reuse.</li><li>Job IDs are unique and incrementing.</li><li>All actions require proper authentication.</li></ul><h2 id="integration" tabindex="-1">Integration <a class="header-anchor" href="#integration" aria-label="Permalink to &quot;Integration&quot;">​</a></h2><p>To use the RNG contract in your smart contract:</p><ol><li>Implement a <code>receiverand</code> action that accepts <code>uint64_t assoc_id</code> and <code>uint64_t random_value</code> parameters.</li><li>Call <code>requestrand</code> with a unique seed and association ID to request a random number.</li><li>Handle the callback in your <code>receiverand</code> action to use the generated random number.</li></ol><p>For a complete step-by-step tutorial on integrating the RNG contract into your smart contract, see <a href="/tutorials/rng/how-to-integrate-rng-in-smart-contracts.html">How to Integrate RNG in Smart Contracts</a>.</p><p>The RNG contract provides a secure, decentralized solution for random number generation that can be trusted for critical applications like gaming, lotteries, and other use cases requiring verifiable randomness.</p>',22),o=[i];function c(s,l,d,u,h,m){return t(),a("div",null,o)}const g=e(n,[["render",c]]);export{p as __pageData,g as default};
