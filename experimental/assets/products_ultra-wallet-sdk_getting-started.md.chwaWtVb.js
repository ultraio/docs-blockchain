import{_ as s,c as i,o as t,N as a}from"./chunks/framework.l15gEyFz.js";const u=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{"title":"Getting Started","order":1,"outline":[0,4]},"headers":[],"relativePath":"products/ultra-wallet-sdk/getting-started.md","filePath":"products/ultra-wallet-sdk/getting-started.md","lastUpdated":null}'),e={name:"products/ultra-wallet-sdk/getting-started.md"},n=a(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><p>To begin using the Ultra Web Wallet in your application, you’ll need to integrate the <code>@ultraos/wallet-sdk</code>. This SDK provides a unified interface for both the Ultra Wallet Extension and the Ultra Web Wallet.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h2><p>First, install the SDK via npm:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @ultraos/wallet-sdk</span></span></code></pre></div><h2 id="sdk-initialization" tabindex="-1">SDK Initialization <a class="header-anchor" href="#sdk-initialization" aria-label="Permalink to &quot;SDK Initialization&quot;">​</a></h2><p>To begin interacting with Ultra Web Wallet or Ultra Wallet Extension, you need to create an instance of the <code>UltraWallet</code> class provided by the <code>@ultraos/wallet-sdk</code>.</p><p>This instance will be used throughout your application to trigger wallet connections, sign transactions, and more.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { UltraWallet } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@ultraos/wallet-sdk&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> wallet</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UltraWallet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  env: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;testnet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Required. Defines the target Ultra network.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>The <code>env</code> option determines which Ultra blockchain network the wallet connects to. Supported values:</p><ul><li><code>&#39;mainnet&#39;</code> – Ultra&#39;s production blockchain.</li><li><code>&#39;testnet&#39;</code> – Public network for development and testing.</li></ul><p>Unlike the Ultra Wallet Extension—which allows users to select their active network manually—the Web Wallet relies on this <code>env</code> configuration to determine network context at runtime.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>⚠️ Always verify that your environment is set appropriately before deploying to production.</p></div><h2 id="connecting-the-wallet" tabindex="-1">Connecting the Wallet <a class="header-anchor" href="#connecting-the-wallet" aria-label="Permalink to &quot;Connecting the Wallet&quot;">​</a></h2><p>Use the <code>connect()</code> method to initiate the login process and register the device with the Ultra Web Wallet:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wallet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Connected:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, result);</span></span></code></pre></div><p>If the Ultra Wallet Extension is installed, it will be used by default. Otherwise, the SDK will automatically fall back to the Web Wallet.</p><h2 id="disconnecting" tabindex="-1">Disconnecting <a class="header-anchor" href="#disconnecting" aria-label="Permalink to &quot;Disconnecting&quot;">​</a></h2><p>To log out the user and clear local credentials:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wallet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disconnect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="⚠️-important-popup-handling-requirements" tabindex="-1">⚠️ Important: Popup Handling Requirements <a class="header-anchor" href="#⚠️-important-popup-handling-requirements" aria-label="Permalink to &quot;⚠️ Important: Popup Handling Requirements&quot;">​</a></h2><p>To ensure proper functioning of the Ultra Web Wallet, <strong>all API calls that trigger UI actions (such as connect, purchase, or signature requests)</strong> must be initiated <strong>within a direct user action</strong>, such as a <code>click</code> or <code>tap</code> event.</p><p>Browsers enforce strict popup blockers for non-user-initiated windows. If your call to the wallet (e.g., <code>ultra.connect()</code> or <code>ultra.purchaseItem()</code>) is not triggered from a user interaction, the popup will likely be blocked, and no action will occur.</p><h3 id="✅-correct-usage-inside-a-button-event" tabindex="-1">✅ Correct Usage (inside a button event): <a class="header-anchor" href="#✅-correct-usage-inside-a-button-event" aria-label="Permalink to &quot;✅ Correct Usage (inside a button event):&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wallet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="❌-incorrect-usage-auto-triggered-or-delayed" tabindex="-1">❌ Incorrect Usage (auto-triggered or delayed): <a class="header-anchor" href="#❌-incorrect-usage-auto-triggered-or-delayed" aria-label="Permalink to &quot;❌ Incorrect Usage (auto-triggered or delayed):&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// This will likely be blocked</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  wallet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">TIP</p><p>🛡 Always ensure wallet methods are triggered synchronously inside user input events to avoid UX issues.</p></div><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><p>After connecting, you can:</p><ul><li>Sign blockchain transactions with <code>signTransaction()</code></li><li>Sign raw messages with <code>signMessage()</code></li><li>Get the current chain ID with <code>getChainId()</code></li><li>Perform on-chain purchases with <code>purchaseItem()</code></li></ul><p>These methods are covered in detail in the <a href="./core-api-methods.html">Core API Methods</a>.</p>`,32),l=[n];function h(o,r,p,d,c,k){return t(),i("div",null,l)}const E=s(e,[["render",h]]);export{u as __pageData,E as default};
