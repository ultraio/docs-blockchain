import{_ as k,D as a,c as o,I as e,w as l,N as t,o as d,k as i,a as s}from"./chunks/framework.l15gEyFz.js";const x=JSON.parse('{"title":"Compile a Contract","description":"","frontmatter":{"title":"Compile a Contract","order":-99997,"oultine":[0,4]},"headers":[],"relativePath":"blockchain/general/tools/cdt/compile-a-contract.md","filePath":"blockchain/general/tools/cdt/compile-a-contract.md","lastUpdated":null}'),r={name:"blockchain/general/tools/cdt/compile-a-contract.md"},c=t('<h1 id="compile-a-contract" tabindex="-1">Compile a Contract <a class="header-anchor" href="#compile-a-contract" aria-label="Permalink to &quot;Compile a Contract&quot;">​</a></h1><p>You can follow <a href="./create-a-contract.html">Create A Contract</a> to create a simple Hello World contract.</p><p>Or example contract can found at this <a href="https://github.com/ultraio/eosio.cdt/tree/master/examples/hello" target="_blank" rel="noreferrer">https://github.com/ultraio/eosio.cdt/tree/master/examples/hello</a></p><h2 id="compile-via-cli" tabindex="-1">Compile via CLI <a class="header-anchor" href="#compile-via-cli" aria-label="Permalink to &quot;Compile via CLI&quot;">​</a></h2><p>Follow these steps to compile your contract</p><h3 id="step-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1" aria-label="Permalink to &quot;Step 1&quot;">​</a></h3><p>Navigate to the hello folder in examples (./examples/hello), you should then see the <code>./src/hello.cpp</code> file</p><h3 id="step-2" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2" aria-label="Permalink to &quot;Step 2&quot;">​</a></h3><p>Run the following commands</p>',9),F=i("div",{class:"language-shell vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"shell"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," mkdir"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," cd"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," cdt-cpp"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -abigen"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ../src/hello.cpp"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -o"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," hello.wasm"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -I"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ../include/")])])])],-1),g=i("div",{class:"language-shell vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"shell"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," mkdir"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," cd"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," cdt-cpp"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -abigen"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ../src/hello.cpp"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -o"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," hello.wasm"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -I"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ../include/")])])])],-1),C=i("div",{class:"language-shell vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"shell"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," mkdir"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," cd"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," build")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"$"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," cdt-cpp"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -abigen"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ../src/hello.cpp"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -o"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," hello.wasm"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," -I"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," ../include/")])])])],-1),y=t(`<p>This will generate 2 files</p><ul><li>The compiled binary wasm, <code>hello.wasm</code></li><li>The generated ABI file, <code>hello.abi</code></li></ul><h2 id="compile-via-cmake" tabindex="-1">Compile via Cmake <a class="header-anchor" href="#compile-via-cmake" aria-label="Permalink to &quot;Compile via Cmake&quot;">​</a></h2><p>You can have a look at <code>CMakeLists.txt</code> in <code>./examples/hello/src</code> as an example on how to configure a Cmake file.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hello)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EOSIO_WASM_OLD_BEHAVIOR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Off&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find_package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(eosio.cdt)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( hello hello hello.cpp )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target_include_directories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PUBLIC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${CMAKE_SOURCE_DIR}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">include )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target_ricardian_directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( hello \${CMAKE_SOURCE_DIR}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">..</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ricardian )</span></span></code></pre></div><p>Follow these steps to compile your contract</p><h3 id="step-1-1" tabindex="-1">Step 1 <a class="header-anchor" href="#step-1-1" aria-label="Permalink to &quot;Step 1&quot;">​</a></h3><p>Navigate to the hello folder in examples (./examples/hello), you should then see the <code>./src/hello.cpp</code> file</p><h3 id="step-2-1" tabindex="-1">Step 2 <a class="header-anchor" href="#step-2-1" aria-label="Permalink to &quot;Step 2&quot;">​</a></h3><p>Run the following commands</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mkdir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cmake</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ..</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> make</span></span></code></pre></div><p>This will generate 2 files under <code>./build/hello</code> directory</p><ul><li>The compiled binary wasm, <code>hello.wasm</code></li><li>The generated ABI file, <code>hello.abi</code></li></ul>`,13);function m(E,u,B,_,b,f){const h=a("Staging"),n=a("Mainnet"),p=a("Experimental");return d(),o("div",null,[c,e(h,null,{default:l(()=>[F]),_:1}),e(n,null,{default:l(()=>[g]),_:1}),e(p,null,{default:l(()=>[C]),_:1}),y])}const S=k(r,[["render",m]]);export{x as __pageData,S as default};
