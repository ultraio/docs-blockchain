import{_ as e,c as t,o as a,N as i}from"./chunks/framework.l15gEyFz.js";const g=JSON.parse('{"title":"How It Works","description":"","frontmatter":{"title":"How It Works","order":0,"outline":[0,4]},"headers":[],"relativePath":"products/ultra-web-wallet/how-it-works.md","filePath":"products/ultra-web-wallet/how-it-works.md","lastUpdated":null}'),o={name:"products/ultra-web-wallet/how-it-works.md"},l=i('<h1 id="how-it-works" tabindex="-1">How It Works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How It Works&quot;">​</a></h1><p>The Ultra Web Wallet is tightly integrated with the Ultra ecosystem to provide a smooth and secure Web3 experience without requiring users to install browser extensions.</p><h2 id="authentication-key-management" tabindex="-1">Authentication &amp; Key Management <a class="header-anchor" href="#authentication-key-management" aria-label="Permalink to &quot;Authentication &amp; Key Management&quot;">​</a></h2><p>When a user connects via Ultra Web Wallet, the authentication flow begins with Ultra SSO (Single Sign-On). This process:</p><ul><li>Authenticates the user.</li><li>Registers the device with Ultra&#39;s EBA (Easy Blockchain Account) service.</li><li>Securely synchronizes a private key that is stored on the user&#39;s local device.</li></ul><p>Ultra does not store full private keys. Instead, keys are split and encrypted—one part held by Ultra and the other stored securely on the client device—ensuring non-custodial ownership.</p><h2 id="fallback-strategy-extension-or-web-wallet" tabindex="-1">Fallback Strategy: Extension or Web Wallet <a class="header-anchor" href="#fallback-strategy-extension-or-web-wallet" aria-label="Permalink to &quot;Fallback Strategy: Extension or Web Wallet&quot;">​</a></h2><p>The <code>@ultraos/wallet-sdk</code> automatically detects whether the Ultra Wallet Extension is installed. If it is, the extension is prioritized. If not, the SDK seamlessly falls back to the Web Wallet experience.</p><p>This makes it easy for developers to support both environments without needing to change implementation logic.</p><h2 id="signing-flow" tabindex="-1">Signing Flow <a class="header-anchor" href="#signing-flow" aria-label="Permalink to &quot;Signing Flow&quot;">​</a></h2><p>Once authenticated, any Web3 event—such as signing messages or submitting transactions—can be triggered by the client application using the Wallet SDK. The general flow is:</p><ol><li>App requests an action via SDK (e.g., <code>signTransaction()</code>).</li><li>SDK communicates with Ultra Web Wallet UI.</li><li>Web Wallet securely signs the transaction.</li><li>Result is returned to the app for submission or follow-up logic.</li></ol><p>This flow abstracts away the complexity of handling private keys, making Ultra Web Wallet a powerful tool for dApp developers.</p>',13),n=[l];function s(r,c,h,d,p,u){return a(),t("div",null,n)}const b=e(o,[["render",s]]);export{g as __pageData,b as default};
