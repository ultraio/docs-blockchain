import{_ as s,c as i,o as a,N as t}from"./chunks/framework.Sw95nWd2.js";const e="/assets/compile-smart-contract-start-local-chain.g_L0hqGe.png",n="/assets/compile-smart-contract-verfy-local-chain.C4eY8ziK.png",l="/assets/compile-smart-contract-cdt-cpp.hj1vHJr8.png",h="/assets/compile-smart-contract-ls-lsa.ICo1ediO.png",p="/assets/compile-smart-contract-helloacc.iVxdm1-R.png",o="/assets/compile-smart-contract-hello-alice.z1Gj-Wy2.png",r="/assets/compile-smart-contract-invalid-name.o2-Miplw.png",b=JSON.parse('{"title":"Tutorial - Creating and Compiling Smart Contracts with Docker","description":"","frontmatter":{"title":"Tutorial - Creating and Compiling Smart Contracts with Docker","order":-9998,"outline":[0,5]},"headers":[],"relativePath":"tutorials/docker/how-to-compile-smart-contract.md","filePath":"tutorials/docker/how-to-compile-smart-contract.md","lastUpdated":null}'),c={name:"tutorials/docker/how-to-compile-smart-contract.md"},k=t('<h1 id="creating-and-compiling-smart-contracts-with-docker" tabindex="-1">Creating and Compiling Smart Contracts with Docker <a class="header-anchor" href="#creating-and-compiling-smart-contracts-with-docker" aria-label="Permalink to &quot;Creating and Compiling Smart Contracts with Docker&quot;">​</a></h1><p>This document guides you on how to create, compile, and deploy smart contracts using Ultra&#39;s 3rd party Docker image.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><p>Before you begin, ensure that Docker is installed on your computer and you can use the Developer Tools Docker image. For guidance, refer to the <a href="./getting-started.html">Tutorial - Install Docker and get started with Developer Tools Docker image</a> tutorial.</p><h2 id="goal" tabindex="-1">Goal <a class="header-anchor" href="#goal" aria-label="Permalink to &quot;Goal&quot;">​</a></h2><p>The goal of this tutorial is to guide developers through the process of creating, compiling, and deploying smart contracts using Development Tools Docker image. By following this step-by-step guide, you will learn how to set up the development environment, create and compile a smart contract, deploy it to the Ultra Blockchain, and interact with it.</p><h2 id="step-1-start-the-docker-container-and-log-in" tabindex="-1">Step 1: Start the Docker Container and Log In <a class="header-anchor" href="#step-1-start-the-docker-container-and-log-in" aria-label="Permalink to &quot;Step 1: Start the Docker Container and Log In&quot;">​</a></h2><p>Start the Docker container, which contains the smart contract developer tools and a local Ultra Blockchain, using the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ultra</span></span></code></pre></div><p>Log in to your container with the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exec</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ultra</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /bin/bash</span></span></code></pre></div><h2 id="step-2-start-the-local-chain-in-the-docker-container" tabindex="-1">Step 2: Start the Local Chain in the Docker Container <a class="header-anchor" href="#step-2-start-the-local-chain-in-the-docker-container" aria-label="Permalink to &quot;Step 2: Start the Local Chain in the Docker Container&quot;">​</a></h2><p>Start the local Ultra Blockchain with:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ultratest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -s</span></span></code></pre></div><p>Accept the default recommendation for the temporary files location by pressing enter.</p><p><img src="'+e+'" alt=""></p><h3 id="step-2a-verify-the-local-chain-is-running" tabindex="-1">Step 2a: Verify the Local Chain is Running <a class="header-anchor" href="#step-2a-verify-the-local-chain-is-running" aria-label="Permalink to &quot;Step 2a: Verify the Local Chain is Running&quot;">​</a></h3><p>Execute the following command inside the container:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> info</span></span></code></pre></div><p><img src="'+n+`" alt=""></p><h2 id="step-3-create-and-compile-the-smart-contract" tabindex="-1">Step 3: Create and Compile the Smart Contract <a class="header-anchor" href="#step-3-create-and-compile-the-smart-contract" aria-label="Permalink to &quot;Step 3: Create and Compile the Smart Contract&quot;">​</a></h2><p>Create a directory on your <strong>host</strong> machine at <code>ultra_workdir/hello</code> and create a file named <code>hello.cpp</code> with the following content:</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;eosio/eosio.hpp&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> [[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eosio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contract</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]]</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> eosio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::contract;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eosio</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">action</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">]]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eosio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eosio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, user);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>Save it, then compile it with the following command in your Docker session:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cdt-cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/ultra_workdir/hello/hello.wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/ultra_workdir/hello/hello.cpp</span></span></code></pre></div><p><img src="`+l+'" alt=""></p><p>Verify that two new files, hello.abi and hello.wasm, were created in the hello directory with the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lsa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/ultra_workdir/hello/</span></span></code></pre></div><p><img src="'+h+`" alt=""></p><h2 id="step-4-create-an-account-for-deployment" tabindex="-1">Step 4: Create an Account for Deployment <a class="header-anchor" href="#step-4-create-an-account-for-deployment" aria-label="Permalink to &quot;Step 4: Create an Account for Deployment&quot;">​</a></h2><p>Inside the Docker container, create a private and public key pair:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --to-console</span></span></code></pre></div><p>You will see a generated key pair:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Private</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">KPNRT7C4CJs9ddNTieC5fL92NQNk82Nxb1EQ5sL4siGhU4oxcV</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Public</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOS7crhavXnYD6LcbfXQuF4GoqWsS8zdYvVXyv2AV9HSFLa75PHCD</span></span></code></pre></div><p>Import the key into your local wallet:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wallet</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --private-key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">KPNRT7C4CJs9ddNTieC5fL92NQNk82Nxb1EQ5sL4siGhU4oxcV</span></span></code></pre></div><p>Create an account named helloacc using your public key:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> newaccount</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --gift-ram-kbytes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 128</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eosio</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOS7crhavXnYD6LcbfXQuF4GoqWsS8zdYvVXyv2AV9HSFLa75PHCD</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOS7crhavXnYD6LcbfXQuF4GoqWsS8zdYvVXyv2AV9HSFLa75PHCD</span></span></code></pre></div><p>Verify the account:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> account</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc</span></span></code></pre></div><p><img src="`+p+'" alt=""></p><h2 id="step-5-deploy-the-smart-contract" tabindex="-1">Step 5: Deploy the Smart Contract <a class="header-anchor" href="#step-5-deploy-the-smart-contract" aria-label="Permalink to &quot;Step 5: Deploy the Smart Contract&quot;">​</a></h2><p>Deploy the smart contract to helloacc:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> contract</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /opt/ultra_workdir/hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.wasm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.abi</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>If you encounter the error account helloacc does not have KYC info, execute:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> eosio.kyc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> togglekyc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[]&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ultra.kyc</span></span></code></pre></div><p>Then retry the deployment command.</p></div><p>Verify the deployment:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc</span></span></code></pre></div><p>If the code hash is not zero, the contract has been successfully deployed.</p><h2 id="step-6-interact-with-your-smart-contract" tabindex="-1">Step 6: Interact with Your Smart Contract <a class="header-anchor" href="#step-6-interact-with-your-smart-contract" aria-label="Permalink to &quot;Step 6: Interact with Your Smart Contract&quot;">​</a></h2><p>Call the hi action of the hello smart contract:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[&quot;alice&quot;]&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc@active</span></span></code></pre></div><p>The output will be &quot;Hello, alice&quot;.</p><p><img src="'+o+'" alt=""> Note: The hi action uses eosio::name parameter, so using capital letters will result in an Invalid name error:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cleos</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> action</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hi</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;[&quot;Alice&quot;]&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> helloacc@active</span></span></code></pre></div><p>Always use names that conform to the EOSIO naming rules: lowercase letters, digits, and periods, with a maximum length of 12 characters.</p><p><img src="'+r+'" alt=""></p><h2 id="step-7-log-out-from-docker-container" tabindex="-1">Step 7: Log Out from Docker Container <a class="header-anchor" href="#step-7-log-out-from-docker-container" aria-label="Permalink to &quot;Step 7: Log Out from Docker Container&quot;">​</a></h2><p>To log out from the Docker container, you can type <code>exit</code> or simply press the <code>CTRL+D</code> shortcut combination.</p><h2 id="what-s-next" tabindex="-1">What&#39;s next? <a class="header-anchor" href="#what-s-next" aria-label="Permalink to &quot;What&#39;s next?&quot;">​</a></h2><p>TBA</p>',60),d=[k];function g(F,y,u,C,m,v){return a(),i("div",null,d)}const E=s(c,[["render",g]]);export{b as __pageData,E as default};
